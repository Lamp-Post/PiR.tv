var exec = require('child_process').exec;
var parseurl = require('url');

var DEFAULT_PATH = '/pandora';
var map = false;
var isItOn=true;

function pandora(mapper) {
    map = mapper;
    return pandora.express;
}

pandora.express = function(req,res,next) {
    if (req.path.indexOf(DEFAULT_PATH) === 0) {
        //replace + and decode
        path = decodeURIComponent(req.path.replace(/\+/g, ' '));
            //remove leading and trailing /
            path = path.replace(/^\/|\/$/g,'');
            //split and remove leading path
            var parts = path.split('/');
            parts.shift();
            var command = parts.shift();
            console.log('executing',command,parts);
            if (pandora[command]) {
                if (command === 'start') {
                    pandora.start();
                } else {
                pandora[command].apply(this,parts);
            }
            //prevent anything else from being served from this subpath
            res.end('executed '+command);
            return;
        }
    }
    next();
};

pandora.start = function() {
    cb();

    function cb() {
        exec('control-pianobar.sh p',function(error, stdout, stderr) {
            console.log(stdout);
            console.log(stderr);
        });
    }
};

pandora.sendKey = function(key) {
    if(key == 'power') {
        if(isItOn) {
            exec('tvservice -o');
            isItOn = false;
        } else {
            exec('tvservice -p');
            isItOn = true;
        }
    } else {
        exec('control-pianobar.sh ' + key);
    }
};

pandora.mapKey = function(command,key,then) {
    pandora[command] = function() {
        pandora.sendKey(key);
        if (then) {
            then();
        }
    };
};

pandora.mapKey('pause','p');
pandora.mapKey('quit','q');
pandora.mapKey('play','p');
pandora.mapKey('next','next');
pandora.mapKey('power','power');

module.exports = pandora;
